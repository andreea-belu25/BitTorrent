Tema2_APD
Belu Andreea-Daniela, 333CB

``README``

In logica implementarii temei nu fac diferenta intre seeds si peers.

1. Structuri utilizate:
    TrackerData retine swarm-urile, informatiile despre fisiere, numarul de fisiere.
        - Swarm pastreaza numarul de clienti si clientii care detin fisierele.
        - Informatiile despre fisiere (nume, hash-urile segmentelor (pastrate in Segment), numarul de segmente) - FileInfoTracker.
    PeerData retine numarul de fisiere detinute de un client, fisierele detinute de acesta, numarul de fisiere pe care il doreste, ce anume doreste din acestea, precum si rangul sau.
        - informatia legata de fisierele detinute: numele fisierului, numarul de segmente detinute din acesta, precum si hash-urile segmentelor detinute este pastrata in FileInfoPeer.
    ClientStress semnifica cat de solicitat este un client (necesar pentru eficienta).


2. Logica implementarii:
    Tracker:
        - primeste fisierele de la clienti (receiveFilesFromClients())
          Pentru fiecare client, primeste numarul de fisiere detinute de acesta, iar pentru fiecare fisier:
            -> verifica daca fisierul exista deja (checkIfFileExists())
                Daca nu exista, initializeaza informatia pentru fisier (initFile()) si swarm-ul asociat (initSwarm()) si creste numarul de fisiere pe care le gestioneaza.
                In cazul in care exista deja, informatia este in continuare primita de la clienti, dar nu face nimic cu aceasta.
            -> verifica daca clientul curent apartine deja swarm-ului (addClientIfNotExistsSwarm()), iar daca nu exista il adauga.
            -> dupa ce a primit toate fisierele de la clienti, acesta trimite cate o notificare pentru fiecare client (startClients()), semnificand faptul ca uploadarea si descarcarea de fisiere poate incepe.

        -> intrucat tracker-ul este un intermediar intre clienti, acesta gestioneaza fluxul de mesaje si dorinte dintre acestia (handleMessages())
            -> pentru fiecare fisier primit, verifica canalul (tag-ul) pe care acesta a ajuns pentru a afla ce trebuie sa faca mai departe
                * daca tag-ul = 3, inseamna ca este o cerere de primire de segmente
                Prin functia reqFileSwarm() tracker-ul ofera swarm-ul specific fisierului primit si adauga clientul in swarm daca nu exista deja.
                * daca tag-ul = 4, trimite informatiile legate de segmentele fisierului cerut prin functia reqFileInfo()
                * daca tag-ul = 5, fisierul a fost downloadat complet si pentru ca nu exista o distinctie intre peers si seeds, nu se executa nimic
                * daca tag-ul = 6, toate fisierele pe care le doreste un client au fost descarcate si numarul clientilor care au terminat de descarcat creste
                * atunci cand toti clientii au terminat descarcarea, tracker-ul se opreste si trimite fiecarui client un mesaj prin care sa inteleaga ca poate sa se inchida (finishedDownloading())

    Client:
        - citeste fisierul specific rangului sau si salveaza datele cu functia readFile()
        - trimite fisierele la tracker prin functia sendFilesToTracker()
            -> pentru fiecare fisier detinut se trimite numele acestuia, numarul de segmente si pentru fiecare segment hash-ul asociat
            -> asteapta un mesaj de la tracker prin care sa poata incepe cautarea si descarcarea fisierelor pe care si le doreste
        - upload_thread_func()
            -> verifica daca a primit un mesaj de inchidere de la tracker
            -> altfel, verifica daca detine segmentul cerut, caz in care trimite 1
            -> altfel, notifica ca nu detine segmentul cerut prin trimiterea unui 0
        - download_thread_func()
            -> pentru fiecare fisier dorit ii cere tracker-ului hash-urile 
            -> updateaza numarul de fisiere detinute
            -> initializeaza fisierul in lista de fisiere detinute
            -> actualizeaza swarm-ul la descarcarea a 10 segmente - getSwarmForFile()
            -> foloseste o lista in care sunt ordonati crescator clientii in functie de nivelul de solicitare al acestora sau de rang (sortClients())
            -> cauta sa vada daca clientul respectiv are hash-ul dorit, caz in care descarcarea se va face de la acesta
            -> se opreste din cautare atunci cand a gasit un client care are hash-ul dorit                 
            -> cand un client si-a terminat descarcarea => salveaza fisierul respectiv intr-un fisier de forma celui cerut in enunt (saveFile())


    Am grija ca cererile (MPI_Send) si primirile (MPI_Recv) pentru diferite informatii sa se faca prin canale diferite (marcate cu diferite tag-uri in cod). 